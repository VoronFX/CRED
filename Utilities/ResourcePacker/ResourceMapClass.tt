<#@ template debug="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="Microsoft.CSharp" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.CodeDom" #> 
<#@ import namespace="System.CodeDom.Compiler" #> 
<##>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#= Namespace #> 
{
<#
	PushIndent(Indent);

	PopIndent();
#>}

<#+ 
	private void Comment(IEnumerable<string> lines)
	{
		if (lines.Any())
		{
			#>/// <summary>
			<#+	
			foreach (var line in lines)
			{						
				#>/// <#= new XElement("dummy", line).Value #>
				<#+
			}
			#>/// </summary>
			<#+		
		}
	}

	public string Indent = "    ";

	private void Class(string name,
		IEnumerable<KeyValuePair<string, string>> files, 
		IEnumerable<KeyValuePair<string, string>> directories)
	{
        #>public sealed class <#= name #> : ResourceDirectoryBase
<#+		#>{
		<#+
			PushIndent(Indent);
			#>public <#= name #>(IResourceDirectory parentDirectory)
<#+		    #>	: base(nameof(<#= name #>), parentDirectory)
<#+		    #>{
		    <#+
				PushIndent(Indent);
				foreach (var file in files)
				{
					#>files.Add((<#= file.Key #>, new ResourceFile(nameof(<#= file.Key #>), <#= file.Value #>, this));
					<#+
				}
				foreach (var directory in files)
				{
					#>directories.Add((<#= directory.Key #>, new <#= directory.Key #>(nameof(<#= directory.Key #>), <#= directory.Value #>, this));
					<#+
				}
			#>}

			<#+
			foreach (var file in files)
			{
				#>IResourceFile <#= file.Key #> => files[nameof(<#= file.Key #>)];
				<#+		
			}
			foreach (var directory in files)
			{
				#><#= directory.Key #> <#= directory.Key #> => directories[nameof(<#= directory.Key #>)];
				<#+		
			}
		#>}
		<#+
	}
#>
