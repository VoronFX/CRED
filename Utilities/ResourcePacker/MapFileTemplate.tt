<#@ template debug="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="Microsoft.CSharp" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.CodeDom" #> 
<#@ import namespace="System.CodeDom.Compiler" #> 
<##>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#= Namespace #> 
{
<#
	var indent = "    ";
	PushIndent(indent);
	Action<IEnumerator<string>> GenerateClass = null; 
	GenerateClass = pathEnumerator =>
	{
		var lastItem = pathEnumerator.MoveNext();
		#>public static partial class <#= pathEnumerator.Current.ToPascalCaseIdentifier() #>
<#		#>{
<#
		PushIndent(indent); 
		if (lastItem)
		{
			#>

<#			foreach (var item in Items)
			{ 
				Comment(item.Comment);
				var itemValue = item.Value.ToLiteral();

				if ((CurrentIndent + "public string const " + item.Name +" = " + itemValue + ";").Length > 100) 
				{
					#>public const string <#= item.Name.ToPascalCaseIdentifier() #> 
<#					PushIndent(indent); 
					#> = <#= itemValue #>;
<#					PopIndent();
				}
				else 
				{
					#>public const string <#= item.Name.ToPascalCaseIdentifier() #> = <#= itemValue #>;
<#				}
				#>

<#			}
		}
		else
		{
			GenerateClass(pathEnumerator);
		} 
		PopIndent();    
		
		#>}
<#    
		};
	
	GenerateClass(Path.GetEnumerator());
	PopIndent();
#>}

<#+ 
	private void Comment(IEnumerable<string> lines)
	{
		if (lines.Any())
		{
			#>/// <summary><#+	
			foreach (var line in lines)
			{						
				#>/// <#= new XElement("dummy", line).Value #><#+
			}
			#>/// </summary><#+
		}
	}
#>